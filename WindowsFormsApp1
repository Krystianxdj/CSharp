using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO.Ports;

namespace WindowsFormsApp1
{
    public partial class Form1 : Form
    {


        // The main control for communicating through the RS-232 port
        private SerialPort comport = new SerialPort();



        public Form1()
        {
            InitializeComponent();

            comport.DataReceived += new SerialDataReceivedEventHandler(port_DataReceived);
        }

        private void BtnOpenPort_Click(object sender, EventArgs e)
        {
            bool error = false;

            // If the port is open, close it.
            if (comport.IsOpen) comport.Close();
            else
            {
                // Set the port's settings
                //comport.BaudRate = int.Parse(cmbBaudRate.Text);
                //comport.DataBits = int.Parse(cmbDataBits.Text);
                //comport.StopBits = (StopBits)Enum.Parse(typeof(StopBits), cmbStopBits.Text);
                //comport.Parity = (Parity)Enum.Parse(typeof(Parity), cmbParity.Text);
                //comport.PortName = cmbPortName.Text;


                comport.BaudRate = 9600;
                comport.PortName = ("COM5");

                try
                {
                    // Open the port
                    comport.Open();
                }
                catch (UnauthorizedAccessException) { error = true; }
                //catch (IOException) { error = true; }
                catch (ArgumentException) { error = true; }

                if (error) MessageBox.Show(this, "Could not open the COM port.  Most likely it is already in use, has been removed, or is unavailable.", "COM Port Unavalible", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                else
                {
                    // Show the initial pin states
                    //UpdatePinState();
                    //chkDTR.Checked = comport.DtrEnable;
                    //chkRTS.Checked = comport.RtsEnable;
                }
            }
        }


        private void port_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            // If the com port has been closed, do nothing
            if (!comport.IsOpen) return;

            // This method will be called when there is data waiting in the port's buffer


                // Obtain the number of bytes waiting in the port's buffer
                int bytes = comport.BytesToRead;

                // Create a byte array buffer to hold the incoming data
                byte[] buffer = new byte[bytes];

                // Read the data from the port and store it in our buffer
                comport.Read(buffer, 0, bytes);

                // Show the user the incoming data in hex format
                //Log(LogMsgType.Incoming, ByteArrayToHexString(buffer));


            Console.WriteLine(ByteArrayToHexString(buffer));
            
        }


        private string ByteArrayToHexString(byte[] data)
        {
            StringBuilder sb = new StringBuilder(data.Length * 3);
            foreach (byte b in data)
                sb.Append(Convert.ToString(b, 16).PadLeft(2, '0').PadRight(3, ' '));
            return sb.ToString().ToUpper();
        }



    }
}
